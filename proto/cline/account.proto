syntax = "proto3";

package cline;
import "cline/common.proto";
option java_package = "bot.cline.proto";
option java_multiple_files = true;

/**
 * Service for account-related operations.
 */
service AccountService {

  /**
   * Handles the user clicking the login link in the UI.
   * Generates a secure nonce for state validation, stores it in secrets,
   * and opens the authentication URL in the external browser.
   *
   * @param request The empty request object.
   * @return A string containing the result of the login operation.
   */
  rpc accountLoginClicked(EmptyRequest) returns (String);

  /**
   * Handles the user clicking the logout button in the UI.
   * Clears API keys and user state.
   *
   * @param request The empty request object.
   * @return An empty response indicating success.
   */
  rpc accountLogoutClicked(EmptyRequest) returns (Empty);

  /**
   * Subscribe to auth status update events (when authentication state changes).
   *
   * @param request The empty request object.
   * @return A stream of AuthState objects representing the authentication state.
   */
  rpc subscribeToAuthStatusUpdate(EmptyRequest)
      returns (stream AuthState);

  /**
   * Handles authentication state changes from the Firebase context.
   * Updates the user info in global state and returns the updated value.
   *
   * @param request The AuthStateChangedRequest containing metadata and user information.
   * @return An AuthState object representing the current authentication state.
   */
  rpc authStateChanged(AuthStateChangedRequest)
      returns (AuthState);

  /**
   * Fetches all user credits data including balance, usage transactions,
   * and payment transactions.
   *
   * @param request The empty request object.
   * @return A UserCreditsData object containing the user's credit information.
   */
  rpc getUserCredits(EmptyRequest) returns (UserCreditsData);

  /**
   * Fetches organization credits data for a specified organization.
   *
   * @param request A GetOrganizationCreditsRequest with the organization ID.
   * @return An OrganizationCreditsData object containing credit information for the organization.
   */
  rpc getOrganizationCredits(GetOrganizationCreditsRequest) returns (OrganizationCreditsData);

  /**
   * Fetches all user organizations data. Returns a list of UserOrganization objects.
   *
   * @param request The empty request object.
   * @return A UserOrganizationsResponse containing the user's organization information.
   */
  rpc getUserOrganizations(EmptyRequest) returns (UserOrganizationsResponse);

  /**
   * Updates the user's organization settings.
   *
   * @param request A UserOrganizationUpdateRequest with the organization ID to update.
   * @return An empty response indicating success.
   */
  rpc setUserOrganization(UserOrganizationUpdateRequest) returns (Empty);
}

/**
 * Request message for authentication state changes.
 */
message AuthStateChangedRequest {
  Metadata metadata = 1;
  UserInfo user = 2;
}

/**
 * Message representing the current authentication state.
 */
message AuthState {
  optional UserInfo user = 1;
}

/**
 * Information about a user.
 */
message UserInfo {
  string uid = 1;
  optional string display_name = 2;
  optional string email = 3;
  optional string photo_url = 4;
  optional string app_base_url = 5; // Cline app base URL
}

/**
 * Information about a user's organization.
 */
message UserOrganization {
  bool active = 1;
  string member_id = 2;
  string name = 3;
  string organization_id = 4;
  repeated string roles = 5; // ["admin", "member", "owner"]
}

/**
 * Response message containing the list of user organizations.
 */
message UserOrganizationsResponse {
  repeated UserOrganization organizations = 1;
}

/**
 * Request message for updating a user's organization settings.
 */
message UserOrganizationUpdateRequest {
  optional string organization_id = 1;
}

/**
 * Data regarding a user's credits, including balance and transaction history.
 */
message UserCreditsData {
  UserCreditsBalance balance = 1;
  repeated UsageTransaction usage_transactions = 2;
  repeated PaymentTransaction payment_transactions = 3;
}

/**
 * Request message for fetching organization credits data.
 */
message GetOrganizationCreditsRequest {
  string organization_id = 1;
}

/**
 * Data regarding an organization's credits, including balance and transaction history.
 */
message OrganizationCreditsData {
  UserCreditsBalance balance = 1;
  string organization_id = 2;
  repeated OrganizationUsageTransaction usage_transactions = 3;
}

/**
 * The user's current credit balance.
 */
message UserCreditsBalance {
  double current_balance = 1;
}

/**
 * A transaction record for AI inference usage.
 */
message UsageTransaction {
  string ai_inference_provider_name = 1;
  string ai_model_name = 2;
  string ai_model_type_name = 3;
  int32 completion_tokens = 4;
  double cost_usd = 5;
  string created_at = 6;
  double credits_used = 7;
  string generation_id = 8;
  string organization_id = 9;
  int32 prompt_tokens = 10;
  int32 total_tokens = 11;
  string user_id = 12;
}

/**
 * A transaction record for payments made to the user's account.
 */
message PaymentTransaction {
  string paid_at = 1;
  string creator_id = 2;
  int32 amount_cents = 3;
  double credits = 4;
}

/**
 * A transaction record for AI inference usage within an organization.
 */
message OrganizationUsageTransaction {
  string ai_inference_provider_name = 1;
  string ai_model_name = 2;
  string ai_model_type_name = 3;
  int32 completion_tokens = 4;
  double cost_usd = 5;
  string created_at = 6;
  double credits_used = 7;
  string generation_id = 8;
  string organization_id = 9;
  int32 prompt_tokens = 10;
  int32 total_tokens = 11;
  string user_id = 12;
}
